<?php

/**
 * üö¶ Clase Enrutador
 * Se encarga de recibir una acci√≥n (por ejemplo, "login", "registro") y ejecutar el controlador y m√©todo correspondiente.
 * Permite modularizar el flujo del sistema sin usar frameworks externos.
 */
class Enrutador {
    /**
     * üìå Resuelve una acci√≥n y ejecuta el controlador correspondiente
     * @param string $accion Acci√≥n recibida por GET (ej: "login", "registro")
     * @param array $rutas Mapa de acciones => [ClaseControlador, metodo]
     */
    public static function resolver($accion, $rutas)
    {
        // ‚úÖ Verifica si la acci√≥n existe en el mapa de rutas
        if (isset($rutas[$accion])) {
            // üîÑ Extrae la clase del controlador y el m√©todo a ejecutar
            [$controladorClase, $metodo] = $rutas[$accion];

            // üß± Crea una instancia del controlador
            $controlador = new $controladorClase();

            // ‚úÖ Verifica si el m√©todo existe en el controlador
            if (method_exists($controlador, $metodo)) {
                // üöÄ Ejecuta el m√©todo correspondiente
                $controlador->$metodo();
            } else {
                // ‚ö†Ô∏è Muestra error si el m√©todo no existe
                self::error("El m√©todo <b>$metodo</b> no existe en el controlador <b>$controladorClase</b>.");
            }
        } else {
            // ‚ö†Ô∏è Muestra error si la acci√≥n no est√° definida
            self::error("No se encontr√≥ la acci√≥n <b>$accion</b>.");
        }
    }

    /**
     * üìå Manejo de errores b√°sicos del enrutador
     * @param string $mensaje Mensaje de error a mostrar
     */
    private static function error($mensaje)
    {
        http_response_code(404); // üß® C√≥digo HTTP 404 (no encontrado)
        echo "<h1>üö® Error en el enrutador</h1>";
        echo "<p>$mensaje</p>";
        exit; // ‚õî Detiene la ejecuci√≥n
    }
}
